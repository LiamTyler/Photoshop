.PHONY: all clean channels

all: channels | tests/test_images
	-@rm -f output.txt one.txt zero.txt

channels: | one.txt zero.txt
		@echo Channels 5 5 0 Test has started

# Create the image we are going to test with
	@./build/bin/FlashPhoto resources/test-images/brainColor.jpg -channel .5 .5 0 tests/test_images/brainColorChan550Test.jpg

# First, run -compare. If it returns with a 1, we know the files were invalid, or that
# something went wrong in the c++ code. If it returns 0, we still have to check to
# see what was printed out (saved in output.txt) to see if the images are the same
# or not. That's what the diff does
	@./build/bin/FlashPhoto tests/golden_images/brainColorChan550.jpg -compare tests/test_images/brainColorChan550Test.jpg > output.txt ;\
		if [ $$? -eq 1 ] ; then\
			echo "Channels 5 5 0 Test FAILED to execute" ;\
		else\
			# the > /dev/null is a trick to not print anything (idk if works on mac)\
			diff output.txt one.txt > /dev/null ;\
			if [ $$? -ne 0 ] ; then\
				echo "Channels 5 5 0 Test FAILED on compare" ;\
			fi ;\
		fi

	@echo Channels 1 0.5 0.25 jpg to png Test has started

	@./build/bin/MIA resources/test-images/brainColor.jpg -channel 1 0.5 0.25 tests/test_images/brainColorChan1525Test.png

	@./build/bin/MIA tests/golden_images/brainColorChan1525.png -compare tests/test_images/brainColorChan1525Test.png > output.txt ;\
		if [ $$? -eq 1 ] ; then\
			echo "Channels 1 0.5 0.25 jpg to png Test FAILED to execute" ;\
		else\
			diff output.txt one.txt > /dev/null ;\
			if [ $$? -ne 0 ] ; then\
				echo "Channels 1 0.5 0.25 jpg to png Test FAILED on compare" ;\
			fi ;\
		fi

	@echo Channels 10 10 10 Test has started

	@./build/bin/MIA resources/test-images/brainColor.jpg -channel 10 10 10 tests/test_images/brainColorChan101010Test.jpg

	@./build/bin/MIA tests/golden_images/brainColorChan101010.jpg -compare tests/test_images/brainColorChan101010Test.jpg > output.txt ;\
		if [ $$? -eq 1 ] ; then\
			echo "Channels 10 10 10 Test FAILED to execute" ;\
		else\
			diff output.txt one.txt > /dev/null ;\
			if [ $$? -ne 0 ] ; then\
				echo "Channels 10 10 10 Test FAILED on compare" ;\
			fi ;\
		fi

	@echo Channels 0 0 1 Test has started

	@./build/bin/MIA resources/test-images/graphWithoutAlpha.png -channel 0 0 1 tests/test_images/graphWithoutAlphaChan001Test.png

	@./build/bin/MIA tests/golden_images/graphWithoutAlphaChan001.png -compare tests/test_images/graphWithoutAlphaChan001Test.png > output.txt ;\
		if [ $$? -eq 1 ] ; then\
			echo "Channels 0 0 1 Test FAILED to execute" ;\
		else\
			diff output.txt one.txt > /dev/null ;\
			if [ $$? -ne 0 ] ; then\
				echo "Channels 0 0 1 Test FAILED on compare" ;\
			fi ;\
		fi

	@echo Channels 0 1 0 Test has started

	@./build/bin/MIA resources/test-images/graphWithoutAlpha.png -channel 0 1 0 tests/test_images/graphWithoutAlphaChan010Test.png

	@./build/bin/MIA tests/golden_images/graphWithoutAlphaChan010.png -compare tests/test_images/graphWithoutAlphaChan010Test.png > output.txt ;\
		if [ $$? -eq 1 ] ; then\
			echo "Channels 0 1 0 Test FAILED to execute" ;\
		else\
			diff output.txt one.txt > /dev/null ;\
			if [ $$? -ne 0 ] ; then\
				echo "Channels 0 1 0 Test FAILED on compare" ;\
			fi ;\
		fi

	@echo Channels 1 0 0 Test has started

	@./build/bin/MIA resources/test-images/graphWithoutAlpha.png -channel 1 0 0 tests/test_images/graphWithoutAlphaChan100Test.png

	@./build/bin/MIA tests/golden_images/graphWithoutAlphaChan100.png -compare tests/test_images/graphWithoutAlphaChan100Test.png > output.txt ;\
		if [ $$? -eq 1 ] ; then\
			echo "Channels 1 0 0 Test FAILED to execute" ;\
		else\
			diff output.txt one.txt > /dev/null ;\
			if [ $$? -ne 0 ] ; then\
				echo "Channels 1 0 0 Test FAILED on compare" ;\
			fi ;\
		fi

	@echo Channels 1 1 1 Test has started

	@./build/bin/MIA resources/test-images/graphWithoutAlpha.png -channel 1 1 1 tests/test_images/graphWithoutAlphaChan111Test.png

	@./build/bin/MIA tests/golden_images/graphWithoutAlphaChan111.png -compare tests/test_images/graphWithoutAlphaChan111Test.png > output.txt ;\
		if [ $$? -eq 1 ] ; then\
			echo "Channels 1 1 1 Test FAILED to execute" ;\
		else\
			diff output.txt one.txt > /dev/null ;\
			if [ $$? -ne 0 ] ; then\
				echo "Channels 1 1 1 Test FAILED on compare" ;\
			fi ;\
		fi

	@echo Bad Input Channels -1 1 1 Test has started
# Here is an example of how to test when you know the input is bad.
# Obviously, you can and should change the output messages on all of these
	@./build/bin/MIA resources/test-images/graphWithoutAlpha.png -channel -1 1 1 tests/test_images/graphWithoutAlphaChanMinus111Test.png > output.txt ;\
# Note: The > output.txt above is just to supress the help message that should appear, since\
# we don't need to know what the output is like when we run compare\
		if [ $$? -ne 1 ] ; then\
			echo "Bad Input Channels -1 1 1 was NOT handled correctly; Test FAILED" ;\
		fi

	@echo Bad Input Channels 20 20 20 Test has started

	@./build/bin/MIA resources/test-images/graphWithoutAlpha.png -channel 20 20 20 tests/test_images/graphWithoutAlphaChan202020Test.png > output.txt ;\
		if [ $$? -ne 1 ] ; then\
			echo "Bad Input Channels 20 20 20 was NOT handled correctly; Test FAILED" ;\
		fi

	@echo Bad Input Channels 1 1 Test has started

	@./build/bin/MIA resources/test-images/graphWithoutAlpha.png -channel 1 1 tests/test_images/graphWithoutAlphaChan11Test.png > output.txt ;\
		if [ $$? -ne 1 ] ; then\
			echo "Bad Input Channels 1 1 was NOT handled correctly; Test FAILED" ;\
		fi

	@echo Bad Input Channels one one one Test has started

	@./build/bin/MIA resources/test-images/graphWithoutAlpha.png -channel one one one tests/test_images/graphWithoutAlphaChanoneoneoneTest.png > output.txt ;\
		if [ $$? -ne 1 ] ; then\
			echo "Bad Input Channels one one one was NOT handled correctly; Test FAILED" ;\
		fi

	@echo Bad Input Channels Test has started

	@./build/bin/MIA resources/test-images/graphWithoutAlpha.png -channel tests/test_images/graphWithoutAlphaChanTest.png > output.txt ;\
		if [ $$? -ne 1 ] ; then\
			echo "Bad Input Channels was NOT handled correctly; Test FAILED" ;\
		fi

one.txt:
	@echo 1 > one.txt
zero.txt:
	@echo 0 > zero.txt

tests/test_images:
	@mkdir tests/test_images

clean:
	@rm -rf tests/test_images
	@rm -f output.txt one.txt zero.txt
